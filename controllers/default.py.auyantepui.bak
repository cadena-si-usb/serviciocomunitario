import re
#from reportlab.platypus import *
#from reportlab.lib.styles import getSampleStyleSheet
#from reportlab.rl_config import defaultPageSize
#from reportlab.lib.units import inch, mm
#from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY
#rom reportlab.lib import colors
from uuid import uuid4
from cgi import escape
import os
# -*- coding: utf-8 -*-
### required - do no delete
def user(): return dict(form=auth())
def download(): return response.download(request,db)
def call(): return service()
### end requires
def index():
    form=auth.login()
    return dict(form=form)

def error():
    return dict()

def representsInt(s):
    try: 
        sint = int(s)
        return True if sint > 0 else False
    except ValueError:
        return False

class Actividad:
    def __init__(self,f_nombre,f_resumen,f_alumnos,f_requerimientos,f_recursos,f_costo,f_recursos_propios,f_aportes_otros,f_aportes_dex,f_monto_total):
        self.f_nombre = f_nombre
        self.f_resumen = f_resumen
        self.f_alumnos = f_alumnos
        self.f_requerimientos = f_requerimientos
        
@auth.requires_login()
def vista_admin():    
    msj= 'Bienvenid@ %s %s' % (auth.user.first_name,auth.user.last_name)

    if auth.has_membership('Proponentes'):      
        #redirect(URL('vista_proponente'))
        pass
    if auth.has_membership('Estudiantes'):
        #redirect(URL('vista_estudiante'))
        pass
    return dict(bienvenida=msj)

@auth.requires_membership('Proponentes')
def vista_proponente():
    def my_form_processing(form):
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'

    msj = 'Bienvenid@ %s %s' % (auth.user.first_name,auth.user.last_name)
    form = SQLFORM(db.t_proponente,
        fields = ['f_tipoprop','f_cedula', 'f_sexo', 'f_telefono'], formstyle='table3cols')

    user = db.auth_user[auth.user.id]
    form.vars.f_user = user
    form.vars.f_email = auth.user.email
    form.vars.f_nombre = auth.user.first_name
    form.vars.f_apellido = auth.user.last_name
    if form.process(onvalidation=my_form_processing, keepvalues=True).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill out the form'
    return dict(form=form, bienvenida=msj)

@auth.requires_membership('Estudiantes')
def vista_estudiante():
    msj = 'Bienvenid@ %s %s' % (auth.user.first_name,auth.user.last_name)
    user = db.auth_user[auth.user.id]
    usuario =  db(db.t_estudiante.f_estado=="Activo" and db.t_estudiante.f_user==auth.user.id).select()
    proyectos = db(db.t_estudiante.id==db.t_cursa.f_estudiante).select()
    for x in proyectos:
        print x
    areas=db(db.t_area.f_estado=="Activo").select()
    if request.env.request_method =='POST':
        if form.process(onvalidation=my_form_processing, keepvalues=True).accepted:
            response.flash = 'form accepted'
        elif form.errors:
            response.flash = 'form has errors'
        else:
            response.flash = 'please fill out the form'
    return dict(rows=usuario, bienvenida=msj,estudianteId=usuario[0].id,proyecto=proyectos[0].t_cursa.f_project)

 
def proponenteProyecto():
    msj = 'Bienvenid@ %s %s' % (auth.user.first_name,auth.user.last_name)
    idProponente = db(db.t_proponente.f_user==auth.user).select()
    return dict(proyectos = db(db.t_project.f_proponente==idProponente[0]).select(), bienvenida=msj)
   
@auth.requires_membership('Administrador')
def moderarProyectos():
    return dict(proyectos=db().select(db.t_cursa.ALL))

@auth.requires_membership('Administrador')
def estudiantes():
    def my_form_processing(form):
        if not re.match('\d{2}-\d{5}$', form.vars.f_usbid):
            form.errors.f_usbid = 'El formato válido de carnet es: 00-00000'
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'

    form = SQLFORM(db.t_estudiante,formstyle='table3cols')

    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, est=db(db.t_estudiante.f_estado=="Activo").select(),message=T(response.flash))

@auth.requires_membership('Administrador')
def proponentes():
    def my_form_processing(form):
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'

    form = SQLFORM(db.t_proponente)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, proponentes=db(db.t_proponente.f_estado=="Activo").select(),message=T(response.flash))



@auth.requires_membership('Administrador')
def tutores():
    def my_form_processing(form):
        if form.vars.f_usbid:
            if not re.match('\d{2}-\d{5}$', form.vars.f_usbid) and not re.match('[a-zA-Z0-9_.+-]+', form.vars.f_usbid):
                form.errors.f_usbid = 'usbid invalido'
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'
    form = SQLFORM(db.t_tutor)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, tutores=db(db.t_tutor.f_estado=="Activo").select(),message=T(response.flash))



@auth.requires_login()
def estado_manage():
    form = SQLFORM.smartgrid(db.t_estado,onupdate=auth.archive)
    return dict(form=form)

#@auth.requires_login()
@auth.requires_membership('Administrador')
def sedes():
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    form = SQLFORM(db.t_sede)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'  
    return dict(form=form, sedes=db(db.t_sede.f_estado=="Activo").select(),message=T(response.flash))

@auth.requires_membership('Administrador')
def areas():
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    form = SQLFORM(db.t_area,onupdate=auth.archive)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, areas=db(db.t_area.f_estado=="Activo").select(),message=T(response.flash))

@auth.requires_membership('Administrador')
def proyectos():
    def my_form_processing(form):
        if not re.match('\d{4}', form.vars.f_codigo):
            form.errors.f_codigo = 'El formato válido del código son 4 dígitos'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if not re.match('\d+', form.vars.f_version):
            form.errors.f_version = 'El formato válido de la versión son 2 dígitos'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'
    form = SQLFORM(db.t_project,onupdate=auth.archive) 
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, proyectos=db(db.t_project.f_estado_del=="Activo").select(),message=T(response.flash))

#@auth.requires(auth.has_membership(role='Administrador') or auth.has_membership(role='Proponentes'))
def propuestas():
    """
    actividades = []
    if request.vars.nro_actividades:
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            if nombre_act and resumen_act and alumnos_act:
                actividad = Actividad(
                    f_nombre=nombre_act,
                    f_resumen=resumen_act,
                    f_alumnos=alumnos_act,
                    f_requerimientos=requerimientos_act
                )
                actividades += [actividad]
            
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'
        if not request.vars.f_tutores:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor académico'
        if not request.vars.f_tutores_comunitarios:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor comunitario'
        if not form.vars.f_nombre:
            form.errors.f_nombre = 'Debe darle un nombre a su propuesta'
        if form.vars.f_estado_del == 'Aprobado con observaciones' and not f_observaciones:
            form.errors.f_observaciones = 'El campo observaciones está vacío'
        nro_real_act = 0
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            # Si todos los campos están vacíos es una actividad eliminada
            if not nombre_act and not resumen_act and not alumnos_act and not requerimientos_act:
                continue
            # Si hay un campo vacío y otro no, es un error
            if (not nombre_act and (resumen_act or alumnos_act)) or \
            (not resumen_act and alumnos_act):
                form.errors.f_actividades = 'Debe llenar todos los campos de actividad'
            # Si todos los campos están bien, es una actividad
            elif nombre_act and resumen_act and alumnos_act:
                nro_real_act += 1
            if not nombre_act:
                form.errors.f_actividad_nombre = 'El nombre de la actividad no puede estar vacío'
            if not resumen_act:
                form.errors.f_actividad_resumen = 'Debe proveer el resumen de la actividad'
            if not representsInt(alumnos_act):
                form.errors.f_actividad_alumnos = "El número de alumnos es inválido"
        # Si no hay ninguna actividad real entonces es un error
        if nro_real_act == 0:
            form.errors.f_actividades = 'Debe tener al menos 1 actividad'
            if form.errors.f_actividad_nombre:
                del form.errors.f_actividad_nombre
            if form.errors.f_actividad_resumen:
                del form.errors.f_actividad_resumen
            if form.errors.f_actividad_alumnos:
                del form.errors.f_actividad_alumnos
                
    lista_tutores = [(tutor.f_usbid, tutor.f_nombre) for tutor in db(db.t_tutor).select()]
    lista_tutores_comunitarios = [(tutor.f_cedula, tutor.f_nombres) for tutor in db(db.t_tutor_comunitario).select()]

    es_adm = 'Administrador' in auth.user_groups.values()

    if not es_adm:
        db.t_propuesta.f_proponente.default = auth.user
        db.t_propuesta.f_proponente.writable = False
        db.t_propuesta.f_estado_del.writable = False
        
    form = SQLFORM.factory(
        db.t_propuesta,
        Field(
            'f_tutores',
            requires=IS_IN_SET(lista_tutores, multiple=True)
        ),
        Field(
            'f_tutores_comunitarios',
            requires=IS_IN_SET(lista_tutores_comunitarios, multiple=True)
        ), _class="form-horizontal"
    )
    
    if form.process(onvalidation=my_form_processing).accepted:
    
        propuesta_id = db.t_propuesta.insert(
            **db.t_propuesta._filter_fields(form.vars))
        tutores = form.vars.f_tutores
        tutores_comunitarios = form.vars.f_tutores_comunitarios
        if propuesta_id and tutores:
            # Si es un solo tutor académico lo meto en una lista para que el ciclo
            # lo tome en cuenta
            if isinstance(tutores,str):
                tutores = [tutores]
            if isinstance(tutores_comunitarios,str):
                tutores_comunitarios = [tutores_comunitarios]
                
            for tutor_id in tutores:
                tutor_existe = db.t_tutor(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_propuesta_tutor.insert(
                        f_propuesta=propuesta_id,
                        f_tutor=tutor_existe
                    )  
            for tutor_id in tutores_comunitarios:
                tutor_existe = db.t_tutor_comunitario(f_cedula=tutor_id)
    
                if tutor_existe:
                    db.t_propuesta_tutor_comunitario.insert(
                        f_propuesta=propuesta_id,
                        f_tutor=tutor_existe
                    ) 
            # Insertar actividades
            # Obviamos la ultima actividad porque siempre es un form vacio
            for actividad in actividades:
                db.t_actividad_propuesta.insert(
                    f_propuesta=propuesta_id,
                    f_nombre=actividad.f_nombre,
                    f_resumen=actividad.f_resumen,
                    f_alumnos=actividad.f_alumnos,
                    f_requerimientos=actividad.f_requerimientos
                )
        response.flash = '1'
        actividades = [] # Borrar las actividades viejas de la vista
    elif form.errors:
        response.flash = '0'
    
    else:
        response.flash = 'Llene el formulario'    

    tutores = db(db.t_tutor).select()
    tutores_comunitarios = db(db.t_tutor_comunitario).select()
    if es_adm:
        propuestas = db(db.t_propuesta).select()
    else:
        proponente = db(db.t_proponente.f_user==auth.user.id).select()[0]
        propuestas = db(db.t_propuesta.f_proponente==proponente.id).select()
        
    for inp in form.elements('input, textarea, select'):
        inp['_class'] = 'form-control'
    return dict(
        form=form,
        es_adm = es_adm,
        tutores=tutores, 
        tutores_comunitarios=tutores_comunitarios, 
        propuestas=propuestas, 
        actividades=actividades,
        message=T(response.flash))
    """

    actividades = []
    if request.vars.nro_actividades:
        # Obviamos la última (el último form siempre es vacío)
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            recursos_act = request.vars["recursos_act_"+str(i)]
            costo_act = request.vars["costo_act_"+str(i)]
            recursos_propios_act = request.vars["recursos_propios_act_"+str(i)]
            aportes_otros_act = request.vars["aportes_otros_act_"+str(i)]
            raportes_dex_act = request.vars["aportes_dex_act_"+str(i)]
            aportes_dex_act = request.vars["aportes_dex_act_"+str(i)]
            monto_total_act = request.vars["monto_total_act_"+str(i)]
            if nombre_act:
                actividad = Actividad(
                    f_nombre=nombre_act,
                    f_resumen=resumen_act,
                    f_alumnos=alumnos_act,
                    f_requerimientos=requerimientos_act,
                    f_recursos=recursos_act,
                    f_costo=costo_act,
                    f_recursos_propios=recursos_propios_act,
                    f_aportes_otros=aportes_otros_act,
                    f_aportes_dex=aportes_dex_act,
                    f_monto_total=monto_total_act
                )
                actividades += [actividad]

    lista_tutores = [(tutor.f_usbid, tutor.f_nombre) for tutor in db(db.t_tutor).select()]
    lista_tutores_comunitarios = [(tutor.f_cedula, tutor.f_nombres) for tutor in db(db.t_tutor_comunitario).select()]

    form = SQLFORM.factory(
        db.t_proyecto,
        db.t_propuesta,
        Field(
            'f_tutores',
            requires=IS_IN_SET(lista_tutores, multiple=True)
        ),
        Field(
            'f_tutores_comunitarios',
            requires=IS_IN_SET(lista_tutores_comunitarios, multiple=True)
        ), _class="form-horizontal"
    )

    def my_form_processing(form):
        pass

    if form.process(onvalidation=my_form_processing).accepted:
        proyecto_id = db.t_proyecto.insert(
            **db.t_proyecto._filter_fields(form.vars))
        form.vars.f_proyecto = proyecto_id
        propuesta_id = db.t_propuesta.insert(
            **db.t_propuesta._filter_fields(form.vars))
        tutores = form.vars.f_tutores
        tutores_comunitarios = form.vars.f_tutores_comunitarios
        if propuesta_id and proyecto_id:
            if tutores:
                if isinstance(tutores,str):
                    tutores = [tutores]
            if tutores_comunitarios:
                if isinstance(tutores_comunitarios,str):
                    tutores_comunitarios = [tutores_comunitarios]
                    
            for tutor_id in tutores:
                tutor_existe = db.t_tutor(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_proyecto_tutor.insert(
                        f_proyecto=proyecto_id,
                        f_tutor=tutor_existe
                    )  
            for tutor_id in tutores_comunitarios:
                tutor_existe = db.t_tutor_comunitario(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_proyecto_tutor_comunitario.insert(
                        f_proyecto=proyecto_id,
                        f_tutor=tutor_existe
                    ) 
            # Insertar actividades
            for actividad in actividades:
                actividad_id = db.t_actividad.insert(
                    f_nombre=actividad.f_nombre,
                    f_resumen=actividad.f_resumen,
                    f_alumnos=actividad.f_alumnos,
                    f_requerimientos=actividad.f_requerimientos,
                    f_recursos=actividad.f_recursos,
                    f_costo=actividad.f_costo,
                    f_recursos_propios=actividad.f_recursos_propios,
                    f_aportes_otros=actividad.f_aportes_otros,
                    f_aportes_dex=actividad.f_aportes_dex,
                    f_monto_total=actividad.f_monto_total
                )
        response.flash = '1'
        actividades = [] # Borrar las actividades viejas de la vista
    elif form.errors:
        response.flash = '0'
    """
    # Generar html
    html = ""
    for field in db.t_proyecto:
        label = field.label
        field_name = str(field).replace("t_proyecto.","")
        html += '<div class="form-group"> \
                    <label> {} </label> \
                    {{=form.custom.widget.{}}} \
                  </div>'.format(label, field_name)
    """
    for inp in form.elements('input, textarea, select'):
        inp['_class'] = 'form-control'
    
    es_adm = 'Administrador' in auth.user_groups.values()

    if es_adm:
        propuestas = [
            {
                'id': p.id,
                'nombre': db.t_proyecto(p.f_proyecto).f_nombre
            } for p in db(db.t_propuesta).select()
        ]
    else:
        propuestas = [
            {
                'id': p.id,
                'nombre': db.t_proyecto(p.f_proyecto).f_nombre
            } for p in db(db.t_propuesta.f_proponente==auth.user.id).select()
        ]
    return dict(
        form=form,
        es_adm = True,
        tutores=[], 
        tutores_comunitarios=[], 
        propuestas=propuestas, 
        actividades=[],
        message=T(response.flash)
    )

def propuestasCrear():
    """
    actividades = []
    if request.vars.nro_actividades:
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            if nombre_act and resumen_act and alumnos_act:
                actividad = Actividad(
                    f_nombre=nombre_act,
                    f_resumen=resumen_act,
                    f_alumnos=alumnos_act,
                    f_requerimientos=requerimientos_act
                )
                actividades += [actividad]
            
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'
        if not request.vars.f_tutores:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor académico'
        if not request.vars.f_tutores_comunitarios:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor comunitario'
        if not form.vars.f_nombre:
            form.errors.f_nombre = 'Debe darle un nombre a su propuesta'
        if form.vars.f_estado_del == 'Aprobado con observaciones' and not f_observaciones:
            form.errors.f_observaciones = 'El campo observaciones está vacío'
        nro_real_act = 0
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            # Si todos los campos están vacíos es una actividad eliminada
            if not nombre_act and not resumen_act and not alumnos_act and not requerimientos_act:
                continue
            # Si hay un campo vacío y otro no, es un error
            if (not nombre_act and (resumen_act or alumnos_act)) or \
            (not resumen_act and alumnos_act):
                form.errors.f_actividades = 'Debe llenar todos los campos de actividad'
            # Si todos los campos están bien, es una actividad
            elif nombre_act and resumen_act and alumnos_act:
                nro_real_act += 1
            if not nombre_act:
                form.errors.f_actividad_nombre = 'El nombre de la actividad no puede estar vacío'
            if not resumen_act:
                form.errors.f_actividad_resumen = 'Debe proveer el resumen de la actividad'
            if not representsInt(alumnos_act):
                form.errors.f_actividad_alumnos = "El número de alumnos es inválido"
        # Si no hay ninguna actividad real entonces es un error
        if nro_real_act == 0:
            form.errors.f_actividades = 'Debe tener al menos 1 actividad'
            if form.errors.f_actividad_nombre:
                del form.errors.f_actividad_nombre
            if form.errors.f_actividad_resumen:
                del form.errors.f_actividad_resumen
            if form.errors.f_actividad_alumnos:
                del form.errors.f_actividad_alumnos
                
    lista_tutores = [(tutor.f_usbid, tutor.f_nombre) for tutor in db(db.t_tutor).select()]
    lista_tutores_comunitarios = [(tutor.f_cedula, tutor.f_nombres) for tutor in db(db.t_tutor_comunitario).select()]

    es_adm = 'Administrador' in auth.user_groups.values()

    if not es_adm:
        db.t_propuesta.f_proponente.default = auth.user
        db.t_propuesta.f_proponente.writable = False
        db.t_propuesta.f_estado_del.writable = False
        
    form = SQLFORM.factory(
        db.t_propuesta,
        Field(
            'f_tutores',
            requires=IS_IN_SET(lista_tutores, multiple=True)
        ),
        Field(
            'f_tutores_comunitarios',
            requires=IS_IN_SET(lista_tutores_comunitarios, multiple=True)
        ), _class="form-horizontal"
    )
    
    if form.process(onvalidation=my_form_processing).accepted:
    
        propuesta_id = db.t_propuesta.insert(
            **db.t_propuesta._filter_fields(form.vars))
        tutores = form.vars.f_tutores
        tutores_comunitarios = form.vars.f_tutores_comunitarios
        if propuesta_id and tutores:
            # Si es un solo tutor académico lo meto en una lista para que el ciclo
            # lo tome en cuenta
            if isinstance(tutores,str):
                tutores = [tutores]
            if isinstance(tutores_comunitarios,str):
                tutores_comunitarios = [tutores_comunitarios]
                
            for tutor_id in tutores:
                tutor_existe = db.t_tutor(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_propuesta_tutor.insert(
                        f_propuesta=propuesta_id,
                        f_tutor=tutor_existe
                    )  
            for tutor_id in tutores_comunitarios:
                tutor_existe = db.t_tutor_comunitario(f_cedula=tutor_id)
    
                if tutor_existe:
                    db.t_propuesta_tutor_comunitario.insert(
                        f_propuesta=propuesta_id,
                        f_tutor=tutor_existe
                    ) 
            # Insertar actividades
            # Obviamos la ultima actividad porque siempre es un form vacio
            for actividad in actividades:
                db.t_actividad_propuesta.insert(
                    f_propuesta=propuesta_id,
                    f_nombre=actividad.f_nombre,
                    f_resumen=actividad.f_resumen,
                    f_alumnos=actividad.f_alumnos,
                    f_requerimientos=actividad.f_requerimientos
                )
        response.flash = '1'
        actividades = [] # Borrar las actividades viejas de la vista
    elif form.errors:
        response.flash = '0'
    
    else:
        response.flash = 'Llene el formulario'    

    tutores = db(db.t_tutor).select()
    tutores_comunitarios = db(db.t_tutor_comunitario).select()
    if es_adm:
        propuestas = db(db.t_propuesta).select()
    else:
        proponente = db(db.t_proponente.f_user==auth.user.id).select()[0]
        propuestas = db(db.t_propuesta.f_proponente==proponente.id).select()
        
    for inp in form.elements('input, textarea, select'):
        inp['_class'] = 'form-control'
    return dict(
        form=form,
        es_adm = es_adm,
        tutores=tutores, 
        tutores_comunitarios=tutores_comunitarios, 
        propuestas=propuestas, 
        actividades=actividades,
        message=T(response.flash))
    """

    actividades = []
    if request.vars.nro_actividades:
        # Obviamos la última (el último form siempre es vacío)
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            recursos_act = request.vars["recursos_act_"+str(i)]
            costo_act = request.vars["costo_act_"+str(i)]
            recursos_propios_act = request.vars["recursos_propios_act_"+str(i)]
            aportes_otros_act = request.vars["aportes_otros_act_"+str(i)]
            raportes_dex_act = request.vars["aportes_dex_act_"+str(i)]
            aportes_dex_act = request.vars["aportes_dex_act_"+str(i)]
            monto_total_act = request.vars["monto_total_act_"+str(i)]
            if nombre_act:
                actividad = Actividad(
                    f_nombre=nombre_act,
                    f_resumen=resumen_act,
                    f_alumnos=alumnos_act,
                    f_requerimientos=requerimientos_act,
                    f_recursos=recursos_act,
                    f_costo=costo_act,
                    f_recursos_propios=recursos_propios_act,
                    f_aportes_otros=aportes_otros_act,
                    f_aportes_dex=aportes_dex_act,
                    f_monto_total=monto_total_act
                )
                actividades += [actividad]

    lista_tutores = [(tutor.f_usbid, tutor.f_nombre) for tutor in db(db.t_tutor).select()]
    lista_tutores_comunitarios = [(tutor.f_cedula, tutor.f_nombres) for tutor in db(db.t_tutor_comunitario).select()]

    form = SQLFORM.factory(
        db.t_proyecto,
        db.t_propuesta,
        Field(
            'f_tutores',
            requires=IS_IN_SET(lista_tutores, multiple=True)
        ),
        Field(
            'f_tutores_comunitarios',
            requires=IS_IN_SET(lista_tutores_comunitarios, multiple=True)
        ), _class="form-horizontal"
    )

    def my_form_processing(form):
        pass

    if form.process(onvalidation=my_form_processing).accepted:
        proyecto_id = db.t_proyecto.insert(
            **db.t_proyecto._filter_fields(form.vars))
        form.vars.f_proyecto = proyecto_id
        propuesta_id = db.t_propuesta.insert(
            **db.t_propuesta._filter_fields(form.vars))
        tutores = form.vars.f_tutores
        tutores_comunitarios = form.vars.f_tutores_comunitarios
        if propuesta_id and proyecto_id:
            if tutores:
                if isinstance(tutores,str):
                    tutores = [tutores]
            if tutores_comunitarios:
                if isinstance(tutores_comunitarios,str):
                    tutores_comunitarios = [tutores_comunitarios]
                    
            for tutor_id in tutores:
                tutor_existe = db.t_tutor(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_proyecto_tutor.insert(
                        f_proyecto=proyecto_id,
                        f_tutor=tutor_existe
                    )  
            for tutor_id in tutores_comunitarios:
                tutor_existe = db.t_tutor_comunitario(f_usbid=tutor_id)
    
                if tutor_existe:
                    db.t_proyecto_tutor_comunitario.insert(
                        f_proyecto=proyecto_id,
                        f_tutor=tutor_existe
                    ) 
            # Insertar actividades
            for actividad in actividades:
                actividad_id = db.t_actividad.insert(
                    f_nombre=actividad.f_nombre,
                    f_resumen=actividad.f_resumen,
                    f_alumnos=actividad.f_alumnos,
                    f_requerimientos=actividad.f_requerimientos,
                    f_recursos=actividad.f_recursos,
                    f_costo=actividad.f_costo,
                    f_recursos_propios=actividad.f_recursos_propios,
                    f_aportes_otros=actividad.f_aportes_otros,
                    f_aportes_dex=actividad.f_aportes_dex,
                    f_monto_total=actividad.f_monto_total
                )
        response.flash = '1'
        actividades = [] # Borrar las actividades viejas de la vista
    elif form.errors:
        response.flash = '0'
    """
    # Generar html
    html = ""
    for field in db.t_proyecto:
        label = field.label
        field_name = str(field).replace("t_proyecto.","")
        html += '<div class="form-group"> \
                    <label> {} </label> \
                    {{=form.custom.widget.{}}} \
                  </div>'.format(label, field_name)
    """
    for inp in form.elements('input, textarea, select'):
        inp['_class'] = 'form-control'
    return dict(
        form=form,
        es_adm = True,
        tutores=[], 
        tutores_comunitarios=[], 
        propuestas=propuestas, 
        actividades=[],
        message=T(response.flash)
    )

@auth.requires_membership('Estudiantes')
def proyectosEstudiante():
    f_tutores = []
    def my_form_processing(form):
        f_tutores += form.vars.f_tutores
        del form.vars.f_tutores
        if not re.match('\d{4}', form.vars.f_codigo):
            form.errors.f_codigo = 'El formato válido del código son 4 dígitos'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if not re.match('\d+', form.vars.f_version):
            form.errors.f_version = 'El formato válido de la versión son 2 dígitos'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'
    form = SQLFORM(db.t_project,onupdate=auth.archive) 
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, proyectos=db(db.t_project.f_estado_del=="Activo").select(),message=T(response.flash))


@auth.requires_membership('Administrador')
def comunidades():
    def my_form_processing(form):
        if not re.match('\d', form.vars.f_cantidadbeneficiados):
            form.errors.f_cantidadbeneficiados = 'Debe ser un número'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    form = SQLFORM(db.t_comunidad,onupdate=auth.archive) 
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = '1'
        
    elif form.errors:
        response.flash = '0'
        
    else:
        response.flash = 'Llene el formulario'
    return dict(form=form, comunidades=db(db.t_comunidad.f_estado_del=="Activo").select(),message=T(response.flash))


def estudianteCursa():
    idProyecto = long(request.args[0])
    idEstudiante = long(request.args[1])
    estado = db(db.t_relacionestproy).select().first()
    form = SQLFORM(db.t_cursa,fields = ['f_estudiante','f_project','f_state']) 
    form.vars.f_estudiante = idEstudiante
    form.vars.f_project = idProyecto
    form.vars.f_state = estado 

    if form.process(keepvalues=True).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill out the form'

    return dict(proyectos=db(db.t_project.id==idProyecto).select(),estudianteID=idEstudiante,idProyecto=idProyecto)

def cursa():
    idProyecto = long(request.args[0])
    idEstudiante = long(request.args[1])
    estado = db(db.t_relacionestproy).select().first()
    form = SQLFORM(db.t_cursa,fields = ['f_estudiante','f_project','f_state']) 
    form.vars.f_estudiante = idEstudiante
    form.vars.f_project = idProyecto
    form.vars.f_state = estado 

    if form.process(keepvalues=True).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill out the form'

    return dict(proyectos=db(db.t_project.id==idProyecto).select(),estudianteID=idEstudiante,idProyecto=idProyecto)

@auth.requires_membership('Administrador')
def validarProyectoEstudiante():
    idProyecto = long(request.args[0])
    db(db.t_cursa.id==idProyecto).update(f_state="2",f_valido="Valido")
    return dict(proyecto=idProyecto)

def validacionProyectoEstudiante():
    idProyecto = long(request.args[0])
    db(db.t_cursa.id==idProyecto).update(f_valido="Activo")
    return dict(proyecto=idProyecto)

def solicitarValidacion():
    idProyecto = long(request.args[0])
    return dict(proyecto=idProyecto)

def solicitarValidacionEstudiante():
    idProyecto = long(request.args[0])
    return dict(proyecto=idProyecto)

def rechazarProyectoEstudiante():
    idProyecto = long(request.args[0])
    db(db.t_cursa.id==idProyecto).update(f_state="3")
    return dict(proyecto=idProyecto)

def registrarProyectoEstudiante():
    idProyecto = long(request.args[0])
    idEstudiante = long(request.args[1])
    proyectoInscrito = db(db.t_cursa.f_estudiante==idEstudiante).select()
    if not proyectoInscrito:
        db.t_cursa.insert(f_estudiante=idEstudiante,f_project=idProyecto,f_state="2")
        mensaje = "Registro de proyecto exitoso. Volver a proyectos"
    else:
        mensaje = "Usted ya tiene un proyecto inscrito. Volver a proyectos"

    return dict(proyecto=idProyecto,estudianteID=idEstudiante,mensaje=mensaje)

def registrarProyectoComoEstudiante():
    idProyecto = long(request.args[0])
    idEstudiante = long(request.args[1])
    proyectoInscrito = db(db.t_cursa.f_estudiante==idEstudiante).select()
    if not proyectoInscrito:
        db.t_cursa.insert(f_estudiante=idEstudiante,f_project=idProyecto,f_state="2")
        mensaje = "Registro de proyecto exitoso. Volver a proyectos"
    else:
        mensaje = "Usted ya tiene un proyecto inscrito. Volver a proyectos"

    return dict(proyecto=idProyecto,estudianteID=idEstudiante,mensaje=mensaje)

@auth.requires_membership('Administrador')
def sede_manage():
    form = SQLFORM.smartgrid(db.t_sede,onupdate=auth.archive)
    return locals()

@auth.requires_membership('Administrador')
def comunidad_manage():
    form = SQLFORM.smartgrid(db.t_comunidad,onupdate=auth.archive)
    return locals()

@auth.requires_membership('Administrador')
def area_manage():
    form = SQLFORM.smartgrid(db.t_area,onupdate=auth.archive)
    return locals()

@auth.requires_membership('Administrador')
def sexo_manage():
    form = SQLFORM.smartgrid(db.t_sexo,onupdate=auth.archive)
    return locals()


def estudiante_manage():
    form = SQLFORM.smartgrid(db.t_estudiante.id==request.args(0))
    if form.process().accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill out the form'
    return locals()

def proponente_manage():
    form = SQLFORM.smartgrid(db.t_proponente,onupdate=auth.archive)
    return locals()

def tutor_manage():
    form = SQLFORM.smartgrid(db.t_tutor,onupdate=auth.archive)
    return locals()

def proyecto_manage():
    form = SQLFORM.smartgrid(db.t_proyecto,onupdate=auth.archive)
    return locals()

def condicion_manage():
    form = SQLFORM.smartgrid(db.t_condicion,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def caracterisicas_manage():
    form = SQLFORM.smartgrid(db.t_caracterisicas,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def cursa_manage():
    form = SQLFORM.smartgrid(db.t_cursa,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def carrera_manage():
    form = SQLFORM.smartgrid(db.t_carrera,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def tipoprop_manage():
    form = SQLFORM.smartgrid(db.t_tipoprop,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def relacionestproy_manage():
    form = SQLFORM.smartgrid(db.t_relacionestproy,onupdate=auth.archive)
    return locals()

def sedesDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_sede.id==x).select())


def estudianteProyectos():
    x = long (request.args[0])
    #return dict(rows = db(db.t_estudiante.id==x).select())
    return dict(rows = db(db.t_estudiante.id==x).select(),proyectos=db().select(db.t_project.ALL),estudianteID=x)

def estudianteInscribeProyectos():
    x = long (request.args[0])
    #return dict(rows = db(db.t_estudiante.id==x).select())
    return dict(rows = db(db.t_estudiante.id==x).select(),proyectos=db().select(db.t_project.ALL),estudianteID=x)


def estudiantesDetalles():
    x = long (request.args[0])
    #return dict(rows = db(db.t_estudiante.id==x).select())
    return dict(rows = db(db.t_estudiante.id==x).select(),estudianteId=x)

def tutoresDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_tutor.id==x).select())


def proyectosDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_project.id==x).select())    

def proyectosDetallesEstudiantes():
    x = long (request.args[0])
    return dict(rows = db(db.t_project.id==x).select()) 

def proponentesDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_proponente.id==x).select())    

def areasDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_area.id==x).select())    

def comunidadesDetalles():
    x = long (request.args[0])
    return dict(rows = db(db.t_comunidad.id==x).select()) 

def estudiantesEditar():
    def my_form_processing(form):
        if not re.match('\d{2}-\d{5}$', form.vars.f_usbid):
            form.errors.f_usbid = 'El formato válido de carnet es: 00-00000'
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_estudiante(request.args[0])
    form = SQLFORM(db.t_estudiante, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La sede ha sido eliminada')
    return dict(form = form)


def estudiantesEditarPerfil():
    def my_form_processing(form):
        if not re.match('\d{2}-\d{5}$', form.vars.f_usbid):
            form.errors.f_usbid = 'El formato válido de carnet es: 00-00000'
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_estudiante(request.args[0])
    form = SQLFORM(db.t_estudiante, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La sede ha sido eliminada')
    return dict(form = form)


def areasEditar():
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_area(request.args[0])
    form = SQLFORM(db.t_area, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La sede ha sido eliminada')
    return dict(form = form)

def sedesEditar():
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_sede(request.args[0])
    form = SQLFORM(db.t_sede, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La sede ha sido eliminada')
    return dict(form = form)

def proponentesEditar():
    def my_form_processing(form):
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_proponente(request.args[0])
    form = SQLFORM(db.t_proponente, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La sede ha sido eliminada')
    return dict(form = form)

def tutoresEditar():
    def my_form_processing(form):
        if form.vars.f_usbid:
            if not re.match('\d{2}-\d{5}$', form.vars.f_usbid) and not re.match('[a-zA-Z0-9_.+-]+', form.vars.f_usbid):
                form.errors.f_usbid = 'usbid invalido'
        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):
            form.errors.f_cedula = 'El formato válido de cédula es: 1232382'
        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', form.vars.f_email):
            form.errors.f_email = 'El formato válido de email es example@example.com'
        if not re.match('\d{7,13}', form.vars.f_telefono):
            form.errors.f_telefono = 'El formato válido de telefono es 08002023223'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_tutor(request.args[0])
    form = SQLFORM(db.t_tutor, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('El tutor ha sido eliminado')
    return dict(form = form)

# TODO: vista
@auth.requires(auth.has_membership(role='Administrador') or auth.has_membership(role='Proponentes'))
def propuestasEliminar():
    propuesta_id = long (request.args[0])
    record = db(db.t_propuesta.id==propuesta_id and db.t_propuesta.f_proponente==auth.user.id)
    record.delete()

#@auth.requires(auth.has_membership(role='Administrador') or auth.has_membership(role='Proponentes'))
def propuestasEditar():
    actividades = []
    if request.vars.nro_actividades:
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            if nombre_act and resumen_act and alumnos_act:
                actividad = Actividad(
                    f_nombre=nombre_act,
                    f_resumen=resumen_act,
                    f_alumnos=alumnos_act,
                    f_requerimientos=requerimientos_act
                )
                actividades += [actividad]
    def my_form_processing(form):
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]|[0-9]|\s*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'
        if not request.vars.f_tutores:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor académico'
        if not request.vars.f_tutores_comunitarios:
            form.errors.f_tutores = 'Debe seleccionar al menos 1 tutor comunitario'
        if not form.vars.f_nombre:
            form.errors.f_nombre = 'Debe darle un nombre a su propuesta'
        if form.vars.f_estado_del == 'Aprobado con observaciones' and not form.vars.f_observaciones:
            form.errors.f_observaciones = 'El campo observaciones está vacío'
        nro_real_act = 0
        for i in range (1,int(request.vars.nro_actividades)):
            nombre_act = request.vars["nombre_act_"+str(i)]
            resumen_act = request.vars["resumen_act_"+str(i)]
            alumnos_act = request.vars["alumnos_act_"+str(i)]
            requerimientos_act = request.vars["requerimientos_act_"+str(i)]
            # Si todos los campos están vacíos es una actividad eliminada
            if not nombre_act and not resumen_act and not alumnos_act and not requerimientos_act:
                continue
            # Si hay un campo vacío y otro no, es un error
            if (not nombre_act and (resumen_act or alumnos_act)) or \
            (not resumen_act and alumnos_act):
                form.errors.f_actividades = 'Debe llenar todos los campos de actividad'
            # Si todos los campos están bien, es una actividad
            elif nombre_act and resumen_act and alumnos_act:
                nro_real_act += 1
            if not nombre_act:
                form.errors.f_actividad_nombre = 'El nombre de la actividad no puede estar vacío'
            if not resumen_act:
                form.errors.f_actividad_resumen = 'Debe proveer el resumen de la actividad'
            if not representsInt(alumnos_act):
                form.errors.f_actividad_alumnos = "El número de alumnos es inválido"
        # Si no hay ninguna actividad real entonces es un error
        if nro_real_act == 0:
            form.errors.f_actividades = 'Debe tener al menos 1 actividad'
            if form.errors.f_actividad_nombre:
                del form.errors.f_actividad_nombre
            if form.errors.f_actividad_resumen:
                del form.errors.f_actividad_resumen
            if form.errors.f_actividad_alumnos:
                del form.errors.f_actividad_alumnos
                

    propuesta_id = long (request.args[0])
    proyecto_id = None
    record = db.t_propuesta(propuesta_id)
    lista_tutores = [(tutor.f_usbid, tutor.f_nombre) for tutor in db(db.t_tutor).select()]
    lista_tutores_comunitarios = [(tutor.f_cedula, tutor.f_nombres) for tutor in db(db.t_tutor_comunitario).select()]
    form = SQLFORM(
        db.t_propuesta, record
    )
    if form.process(onvalidation=my_form_processing).accepted:
        # Si la propuesta fue aprobada entonces se crea el proyecto
        if form.vars.f_estado_del in ('Aprobado', 'Aprobado con observaciones'):
            datos_proyecto = form.vars.copy();
            datos_proyecto['f_estado_del'] = 'Activo'
            # Se le asigna como codigo el id de la propuesta
            datos_proyecto['f_codigo'] = propuesta_id
            del datos_proyecto['f_observaciones']
            del datos_proyecto['id']
            if not record.f_project:
                proyecto_id = db.t_project.insert(**datos_proyecto)
            else:
                proyecto_id = db(db.t_project.id==record.f_project).update(**datos_proyecto)
        
        form.vars.f_version = int(record.f_version)+1
        form.vars.f_project = proyecto_id
        db(db.t_propuesta.id==propuesta_id).update(
            **db.t_propuesta._filter_fields(form.vars))
        
        tutores = request.vars.f_tutores
        tutores_comunitarios = request.vars.f_tutores_comunitarios
        # Si es un solo tutor académico lo meto en una lista para que el ciclo
        # lo tome en cuenta
        if isinstance(tutores,str):
            tutores = [tutores]
        if isinstance(tutores_comunitarios,str):
            tutores_comunitarios = [tutores_comunitarios]
        # Borro los viejos e inserto los nuevos
        db(db.t_propuesta_tutor.f_propuesta==propuesta_id).delete()
        db(db.t_propuesta_tutor_comunitario.f_propuesta==propuesta_id).delete()
        db(db.t_actividad_propuesta.f_propuesta==propuesta_id).delete()
        if form.vars.f_estado_del in ('Aprobado', 'Aprobado con observaciones'):
            db(db.t_actividad_project.f_project==proyecto_id).delete()
            db(db.t_project_tutor.f_project==proyecto_id).delete()
            db(db.t_project_tutor_comunitario.f_project==proyecto_id).delete()

        for tutor_id in tutores:
            tutor_existe = db.t_tutor(f_usbid=tutor_id)

            if tutor_existe:
                db.t_propuesta_tutor.insert(
                    f_propuesta=propuesta_id,
                    f_tutor=tutor_existe
                ) 
                db.t_project_tutor.insert(
                    f_project=proyecto_id,
                    f_tutor=tutor_existe
                )  
                
        for tutor_id in tutores_comunitarios:
            tutor_existe = db.t_tutor_comunitario(f_cedula=tutor_id)

            if tutor_existe:
                db.t_propuesta_tutor_comunitario.insert(
                    f_propuesta=propuesta_id,
                    f_tutor=tutor_existe
                ) 
                db.t_project_tutor_comunitario.insert(
                    f_project=proyecto_id,
                    f_tutor=tutor_existe
                )        
        # Insertar actividades
        for actividad in actividades:
            if actividad.f_nombre and actividad.f_resumen and \
            actividad.f_alumnos and actividad.f_requerimientos:
                db.t_actividad_propuesta.insert(
                    f_propuesta=propuesta_id,
                    f_nombre=actividad.f_nombre,
                    f_resumen=actividad.f_resumen,
                    f_alumnos=actividad.f_alumnos,
                    f_requerimientos=actividad.f_requerimientos
                )
                if form.vars.f_estado_del in ('Aprobado', 'Aprobado con observaciones'):
                    db.t_actividad_project.insert(
                        f_project=proyecto_id,
                        f_nombre=actividad.f_nombre,
                        f_resumen=actividad.f_resumen,
                        f_alumnos=actividad.f_alumnos,
                        f_requerimientos=actividad.f_requerimientos
                    )  
        response.flash = '1'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return {'mensaje':'La propuesta ha sido eliminada'}
    tutores = db(db.t_tutor).select()
    tutores_comunitarios = db(db.t_tutor_comunitario).select()
    
    tmp = db(db.t_propuesta_tutor.f_propuesta==propuesta_id).select(db.t_propuesta_tutor.f_tutor)
    tutores_propuesta=[]
    for tutor in tmp:
        tutores_propuesta += [db.t_tutor(tutor.f_tutor).f_usbid]
        
    tmp = db(db.t_propuesta_tutor_comunitario.f_propuesta==propuesta_id).select(db.t_propuesta_tutor_comunitario.f_tutor)
    tutores_comunitarios_propuesta=[]
    for tutor in tmp:
        tutores_comunitarios_propuesta += [db.t_tutor_comunitario(tutor.f_tutor).f_cedula]
    propuestas = db(db.t_propuesta).select()
    if len(actividades) == 0:
        actividades = db(db.t_actividad_propuesta.f_propuesta==propuesta_id).select()
    for inp in form.elements('input, textarea, select'):
        inp['_class'] = 'form-control'
    es_adm = 'Administrador' in auth.user_groups.values()
    return dict(
        form=form,
        es_adm=es_adm,
        tutores=tutores,
        tutores_comunitarios=tutores_comunitarios,
        propuestas=propuestas,
        actividades=actividades,
        tutores_propuesta=tutores_propuesta,
        tutores_comunitarios_propuesta=tutores_comunitarios_propuesta,
        message=T(response.flash),
        request=request
    )


def proyectosEditar():
    def my_form_processing(form):
        if not re.match('\d{4}', form.vars.f_codigo):
            form.errors.f_codigo = 'El formato válido del código son 4 dígitos'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_descripcion):
            form.errors.f_descripcion = 'Sólo puede contener letras'
        if not re.match('\d+', form.vars.f_version):
            form.errors.f_version = 'El formato válido de la versión son 2 dígitos'
        if form.vars.f_fechaini > form.vars.f_fechafin:
            form.errors.f_fechaini = 'La fecha final del proyecto es menor que la inicial'
            form.errors.f_fechafin = 'La fecha final del proyecto es menor que la inicial'    
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_project(request.args[0])
    form = SQLFORM(db.t_project, record, deletable = True)
    if form.process(onvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('El proyecto ha sido eliminada')
    return dict(form = form)

def comunidadesEditar():
    def my_form_processing(form):
        if not re.match('\d', form.vars.f_cantidadbeneficiados):
            form.errors.f_cantidadbeneficiados = 'Debe ser un número'
        if not re.match('[A-ZÁÉÍÓÚÑ]|[A-ZÁÉÍÓÚÑa]|[a-zñáéíóúäëïöü]*$', form.vars.f_nombre):
            form.errors.f_nombre = 'Sólo puede contener letras'
    x = long (request.args[0])
    #return dict(rows = db(db.t_sede.id==x).select())
    record = db.t_comunidad(request.args[0])
    form = SQLFORM(db.t_comunidad, record, deletable = True)
    if form.process(nvalidation=my_form_processing).accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    elif not record:
        return dict('La comunidad ha sido eliminada')
    return dict(form = form)

def generarPdfConstanciaInicio():
    x = long (request.args[0])
    rows = db(db.t_estudiante.id==x).select()
    USBID = rows[0].f_usbid
    Nombre = rows[0].f_nombre
    Apellido = rows[0].f_apellido
    Cedula = rows[0].f_cedula
    Carrera = rows[0].f_carrera
    Sede = rows[0].f_sede
    Sexo = rows[0].f_sexo
    tlf = rows[0].f_telefono
    direccion = rows[0].f_direccion
    
    title = "Constancia de Inicio de Servicio Comunitario "
    heading = "Datos del estudiante:"
    

    styles = getSampleStyleSheet()
    tmpfilename=os.path.join(request.folder,'private',str(uuid4()))
    doc = SimpleDocTemplate(tmpfilename)
    logo = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../static/img/logousb.png')
    salto = '<br />\n'
    
    story = []
    story.append(Image(logo,width=188, height=125))
    story.append(Paragraph(salto,styles["Normal"]))
    story.append(Paragraph(escape(title),styles["Title"]))
    story.append(Paragraph(escape(heading),styles["Heading2"]))
    story.append(Paragraph(escape('USBID: ' + str(USBID)),styles["Normal"]))
    story.append(Paragraph(escape('Nombres: ' + str(Nombre)),styles["Normal"]))
    story.append(Paragraph(escape('Apellidos: ' + str(Apellido)),styles["Normal"]))
    story.append(Paragraph(escape('Cédula: ' + str(Cedula)),styles["Normal"]))
    story.append(Paragraph(escape('Carrera: ' + str(Carrera)),styles["Normal"]))
    story.append(Paragraph(escape('Sede: ' + str(Sede)),styles["Normal"]))
    story.append(Paragraph(escape('Sexo: ' + str(Sexo)),styles["Normal"]))
    story.append(Paragraph(escape('Teléfono: ' + str(tlf)),styles["Normal"]))
    story.append(Paragraph(escape('Dirección: ' + str(direccion)),styles["Normal"]))
    
    story.append(Paragraph(salto,styles["Normal"]))
    story.append(Paragraph(escape('Información del proyecto:'),styles["Heading2"]))
    story.append(Paragraph(escape('Nombre del proyecto: ' + '[Nombre del proyecto]'),styles["Normal"]))
    story.append(Paragraph(escape('Código del proyecto : ' +'[Código del proyecto]'),styles["Normal"]))
    story.append(Paragraph(escape('Tutor Acádemico: ' + '[Nombre del tutor]'),styles["Normal"]))
    story.append(Paragraph(escape('Tutor Comunitario: ' + '[Nombre del tutor]'),styles["Normal"]))
    
    
    story.append(Spacer(1,2*inch))
    doc.build(story)
    data = open(tmpfilename,"rb").read()
    os.unlink(tmpfilename)
    response.headers['Content-Type']='application/pdf'
    return data
    

def generarPdfConstanciaInscripcion():
    x = long (request.args[0])
    y = long (request.args[1])
    est = db(db.t_estudiante.id==x).select()
    proy = db(db.t_project.id==y).select()
    
    USBID = est[0].f_usbid
    Nombre = est[0].f_nombre
    Apellido = est[0].f_apellido
    Cedula = est[0].f_cedula
    Carrera = est[0].f_carrera
    Sede = est[0].f_sede
    Sexo = est[0].f_sexo
    tlf = est[0].f_telefono
    direccion = est[0].f_direccion
    
    codigo_pr = proy[0].f_codigo
    nombre_pr = proy[0].f_nombre
    descripcion_pr = proy[0].f_descripcion
    area_pr = proy[0].f_area
    estado_pr = proy[0].f_estado
    tutor_pr = proy[0].f_tutor
    fecha_ini = proy[0].f_fechaini
    fecha_fin = proy[0].f_fechafin
    version_pr = proy[0].f_version
    comunidad_pr = proy[0].f_comunidad  
    proponente_pr = proy[0].f_proponente
    
    
    title = "Constancia de Inscripción de Proyecto "
    heading = "Datos del estudiante:"
    

    styles = getSampleStyleSheet()
    tmpfilename=os.path.join(request.folder,'private',str(uuid4()))
    doc = SimpleDocTemplate(tmpfilename)
    logo = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../static/img/logousb.png')
    salto = '<br />\n'
    
    story = []
    story.append(Image(logo,width=188, height=125))
    story.append(Paragraph(salto,styles["Normal"]))
    story.append(Paragraph(escape(title),styles["Title"]))
    story.append(Paragraph(escape(heading),styles["Heading2"]))
    story.append(Paragraph(escape('USBID: ' + str(USBID)),styles["Normal"]))
    story.append(Paragraph(escape('Nombres: ' + str(Nombre)),styles["Normal"]))
    story.append(Paragraph(escape('Apellidos: ' + str(Apellido)),styles["Normal"]))
    story.append(Paragraph(escape('Cédula: ' + str(Cedula)),styles["Normal"]))
    story.append(Paragraph(escape('Carrera: ' + str(Carrera)),styles["Normal"]))
    story.append(Paragraph(escape('Sede: ' + str(Sede)),styles["Normal"]))
    story.append(Paragraph(escape('Sexo: ' + str(Sexo)),styles["Normal"]))
    story.append(Paragraph(escape('Teléfono: ' + str(tlf)),styles["Normal"]))
    story.append(Paragraph(escape('Dirección: ' + str(direccion)),styles["Normal"]))
    
    story.append(Paragraph(salto,styles["Normal"]))
    story.append(Paragraph(escape('Información del proyecto:'),styles["Heading2"])) 
    story.append(Paragraph(escape('Código del proyecto : ' + str(codigo_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Nombre del proyecto: ' + str(nombre_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Descripción: '+ str(descripcion_pr) ),styles["Normal"]))
    story.append(Paragraph(escape('Área:' + str(area_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Estado: ' + str(estado_pr) ),styles["Normal"]))
    story.append(Paragraph(escape('Tutor: ' +str(tutor_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Fecha de inicio: '+str(fecha_ini) ),styles["Normal"]))
    story.append(Paragraph(escape('Fecha de finalización: '+ str(fecha_fin) ),styles["Normal"]))
    story.append(Paragraph(escape('Versión: ' +str(version_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Comunidad: ' +str(comunidad_pr)),styles["Normal"]))
    story.append(Paragraph(escape('Proponente: ' +str(proponente_pr)),styles["Normal"]))
    
    
    story.append(Spacer(1,2*inch))
    doc.build(story)
    data = open(tmpfilename,"rb").read()
    os.unlink(tmpfilename)
    response.headers['Content-Type']='application/pdf'
    return data
